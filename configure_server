#! /bin/bash
#
# Executable script to configure the server for a flask application. Should
# be executed by a user that has sudo privileges.
# 

#######################################
# Computes and sets the number of workers for supervisor,
# using a simple relation to the number of cores.
#######################################
compute_number_of_workers() {
  N_CORES=$(nproc --all)
  let "N_WORKERS = 2 * $N_CORES + 1"
}

#######################################
# Edits the sshd_config file such that root logins are
# not allowed.
#######################################
configure_sshd() {
  sudo sed -i 's/PermitRootLogin yes/PermitRootLogin no/g' /etc/ssh/sshd_config
  sudo sed -i 's/PasswordAuthentication yes/PasswordAuthentication no/g' /etc/ssh/sshd_config
  sudo service ssh restart
}

#######################################
# Installs and configures ufw, the Uncomplicated Firewall,
# and configures it to only allow external traffic on
# port 22 (ssh), 80 (http) and 443 (https). Any other ports
# will not be allowed.
#######################################
setup_firewall() {
  sudo apt-get install -y ufw
  sudo ufw allow ssh
  sudo ufw allow http
  sudo ufw allow http/tcp
  sudo ufw allow 443/tcp
  sudo ufw --force enable
  sudo ufw status
}

#######################################
#Installs the database required for a project.
#######################################
configure_database() {
  sudo apt-get -y install sqlite3
  # sudo apt-get -y install sqlite3  
}

#######################################
# Installs python v3.7 on this server. This function also
# generates a virtual environment and installs the requirements
# of the project with pip. A pure Python web server (gunicorn)
# is also installed.
#######################################
configure_python3() {
  sudo apt install -y software-properties-common
  sudo add-apt-repository ppa:deadsnakes/ppa
  sudo apt install -y python3.7
  sudo apt-get install -y python3.7-venv
  python3.7 -m venv "${DIR_GITHUB_REPO}/venv"
  source "${DIR_GITHUB_REPO}/venv/bin/activate"
  python3.7 -m pip install --upgrade pip
  python3.7 -m pip install -r "${DIR_GITHUB_REPO}/requirements.txt"
  python3.7 -m pip install gunicorn
}

#######################################
# Configures nginx.
# listen on port 80 (http)
# listen on port 443 (https)
# forward application requests to the gunicorn server
#######################################
configure_nginx() {
  sudo apt-get -y install nginx
  sudo rm -f /etc/nginx/sites-enabled/default

  sudo /bin/su -c "echo '' > ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo 'server {' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '  listen 80;' >> ${NGINX_ERROR_LOG}"

  sudo /bin/su -c "echo '  server_name _;' >> ${NGINX_ERROR_LOG}"
  # sudo /bin/su -c "echo '  server_name ${GITHUB_REPO} www.${GITHUB_REPO};' >> ${NGINX_ERROR_LOG}"

  sudo /bin/su -c "echo '  location / {' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '    return 301 https://\$host\$request_uri;' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '  }' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '}' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo 'server {' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '  listen 443 ssl;' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '  server_name _;' >> ${NGINX_ERROR_LOG}"

# "/etc/letsencrypt/live/${GITHUB_REPO}/fullchain.pem"
# "/etc/letsencrypt/live/${GITHUB_REPO}/privkey.pem"
  sudo /bin/su -c "echo '  ssl_certificate ${DIR_GITHUB_REPO}${GITHUB_REPO}/certs/cert.pem;' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '  ssl_certificate_key ${DIR_GITHUB_REPO}${GITHUB_REPO}/certs/key.pem;' >> ${NGINX_ERROR_LOG}"
  
  sudo /bin/su -c "echo '  access_log ${NGINX_ACCESS_LOG};' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '  error_log ${NGINX_ERROR_LOG};' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '  location / {' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '    proxy_pass http://localhost:${PORT};' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '    proxy_redirect off;' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '    proxy_set_header Host \$host;' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '    proxy_set_header X-Real-IP \$remote_addr;' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '  }' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '  location /static {' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '    alias ${DIR_GITHUB_REPO}${GITHUB_REPO}/app/static;' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '    expires 30d;' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '  }' >> ${NGINX_ERROR_LOG}"
  sudo /bin/su -c "echo '}' >> ${NGINX_ERROR_LOG}"
  
  sudo systemctl restart nginx
  sudo service nginx start
  sudo service nginx reload

  sudo ln -s /etc/nginx/sites-available/${GITHUB_REPO} /etc/nginx/sites-enabled

}

#######################################
# Configures supervisor to watch over the
# application running. We need to change the permissions on the
# supervisor.sock file so that our sudo user can can execute the 
# update script after pull requests have been made.
#######################################
configure_supervisor() {
  sudo apt-get -y install supervisor
  sudo /bin/su -c "echo '[program:${GITHUB_REPO}]' > /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'directory=${DIR_GITHUB_REPO}${GITHUB_REPO}' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'command=${DIR_GITHUB_REPO}venv/bin/gunicorn -b localhost:${PORT} -w ${N_WORKERS} wsgi:app' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'user=${SERVER_USERNAME}' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'autostart=true' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'autorestart=true' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'stopasgroup=true' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'killasgroup=true' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'stderr_logfile=${SUPERVISOR_STDER_LOG}' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'stdout_logfile=${SUPERVISOR_STDOUT_LOG}' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo '[unix_http_server]' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'file=/var/run/supervisor.sock' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'chmod=0770' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo /bin/su -c "echo 'chown=root:sudo' >> /etc/supervisor/conf.d/${GITHUB_REPO}.conf"
  sudo supervisorctl reload
}

#######################################
# Generates the log files for the project. 
#######################################
create_log_files() {
  sudo mkdir -p "${DIR_LOGS}"
  SUPERVISOR_STDER_LOG="${DIR_LOGS}supervisor.stder.log"
  SUPERVISOR_STDOUT_LOG="${DIR_LOGS}supervisor.stdout.log"
  NGINX_ACCESS_LOG="${DIR_LOGS}nginx.access.log"
  NGINX_ERROR_LOG="${DIR_LOGS}nginx.error.log"
  sudo /bin/su -c "echo '' > ${SUPERVISOR_STDER_LOG}"
  sudo /bin/su -c "echo '' > ${SUPERVISOR_STDOUT_LOG}"
  sudo /bin/su -c "echo '' > ${NGINX_ACCESS_LOG}"
  sudo /bin/su -c "echo '' > ${NGINX_ERROR_LOG}"
}

#######################################
# Clones the project from a repository via SSH. You must add the public
# key generated with ssh-keygen to https://github.com/settings/keys. Don't
# forget to authenticate your connection with ssh -T git@github.com.
#######################################
clone_project() {
  git clone git@github.com:${GITHUB_USERNAME}/${GITHUB_REPO}.git
}

#######################################
# Installs PHP.
#######################################
configure_php() {
  sudo apt install php7.2 -cli -y
}

#######################################
# Configures and installs the certificate bot. See:
#     https://www.digitalocean.com/community/tutorials/how-to-serve-flask-applications-with-gunicorn-and-nginx-on-ubuntu-18-04
#######################################
# configure_certbot() {
# 1) self-assigned certificates:
#   sudo apt install openssl
#   openssl req -x509 -newkey rsa:4096 -nodes -out ${DIR_GITHUB_REPO}/${GITHUB_REPO}/certs/cert.pem -keyout ${DIR_GITHUB_REPO}/${GITHUB_REPO}/certs/key.pem -days 365
# 2) the proper way:
#   sudo add-apt-repository ppa:certbot/certbot
#   sudo apt install python-certbot-nginx
#   sudo certbot --nginx -d ${GITHUB_REPO} -d www.${GITHUB_REPO}
# }


#######################################
# Sets up the server based for a given project.
#######################################
main() {

  source .env

  DIR_GITHUB_REPO="/home/${SERVER_USERNAME}/${GITHUB_REPO}/"
  DIR_LOGS="/var/log/${GITHUB_REPO}/"

  sudo apt update
  compute_number_of_workers
  
  cd /home/${SERVER_USERNAME}/
  clone_project
  cd ${DIR_GITHUB_REPO}

  create_log_files
  
  configure_sshd
  setup_firewall

  configure_supervisor
  configure_nginx

  configure_database
  configure_python3
  configure_php

}

main
